---
import GroupedButtons from "./GroupedButtons.astro";
import HomeIcon from "./../icons/HomeIcon.astro";
import PortfolioIcon from "./../icons/PortfolioIcon.astro";
import SendIcon from "./../icons/SendIcon.astro";
import MoonIcon from "./../icons/MoonIcon.astro";
import SunIcon from "./../icons/SunIcon.astro";
import LinkedInIcon from "./../icons/LinkedInIcon.astro";
import GitHubIcon from "./../icons/GitHubIcon.astro";
import LinkButton from "./../LinkButton.astro";
import { LINKEDIN_URL, GITHUB_URL, LANGUAGES } from "../../constants/global";
import { navbarTranslations } from "../../i18n/components/navbar";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";

const themes = [
  { name: "Light", icon: SunIcon, value: "light" },
  { name: "Dark", icon: MoonIcon, value: "dark" },
];


const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang, navbarTranslations);
const languages = LANGUAGES[lang]
---

<aside
  id="sideMenu"
  class="fixed top-0 left-0 w-64 h-full shadow-lg transform -translate-x-full transition-transform duration-300 z-[60] flex flex-col"
>
  <div class="border-b flex justify-center items-center py-5 px-6 scrbnll-header">
    <h1 class="animate-pulse"><b>Samuel Carbonell Gon√ßalves</b></h1>
  </div>


  <nav class="flex-1 flex flex-col gap-4 p-4 text-sm">
    <LinkButton href="/#" title="Home" customClass="scrbnll-button">
      <HomeIcon slot="before" />
      {t.homeTitle}
    </LinkButton>
    <LinkButton href="#Portfolio" title="Portfolio" customClass="scrbnll-button">
      <PortfolioIcon slot="before" />
      {t.portfolioTitle}
    </LinkButton>
    <LinkButton href="#Contact" title="Contact" customClass="scrbnll-button">
      <SendIcon slot="before" />
      {t.contactTitle}
    </LinkButton>
  </nav>

  <div class="p-4 flex flex-col gap-4 text-sm">
    <GroupedButtons title={t.themeTitle}>
      {
        themes.map((theme) => (
          <button
            type="button"
            data-theme={theme.value}
            id="theme-toggle-btn-aside"
            class="px-2 py-1 rounded transition-colors flex items-center gap-2 text-xs scrbnll-button"
          >
            <theme.icon class="w-4 h-4" />
          </button>
        ))
      }
    </GroupedButtons>

    <GroupedButtons title={t.languageTitle}>
      {
        languages.map((lang) => (
          <button
            type="button"
            data-lang={lang.code}
            class="px-3 py-2 rounded transition-colors flex items-center gap-2 text-xs scrbnll-button"
          >
            <img src={lang.flag} alt={lang.name} class="w-4 h-4" />
          </button>
        ))
      }
    </GroupedButtons>
  </div>

  <div class="p-4 border-t flex gap-4 justify-center scrbnll-footer">
      <LinkButton href={LINKEDIN_URL} title="LinkedIn" target="_blank">
          <LinkedInIcon />
      </LinkButton>
    <LinkButton href={GITHUB_URL} title="GitHub" target="_blank">
        <GitHubIcon />
    </LinkButton>
  </div>
</aside>

<script type="module">
  /* ==== MENU ====*/
  const toggleBtn = document.getElementById("toggleMenu");
  const menu = document.getElementById("sideMenu");
  const overlay = document.getElementById("menuOverlay");
  const openMenu = () => {
    menu.classList.remove("-translate-x-full");
    overlay.classList.remove("hidden");
  };
  const closeMenu = () => {
    menu.classList.add("-translate-x-full");
    overlay.classList.add("hidden");
  };
  toggleBtn.addEventListener("click", () => {
    const isOpen = !menu.classList.contains("-translate-x-full");
    isOpen ? closeMenu() : openMenu();
  });
  overlay.addEventListener("click", closeMenu);

  /* ==== THEME ====*/
  const themeButtons = document.querySelectorAll("#theme-toggle-btn-aside");
  function getSavedTheme() {
    return localStorage.getItem("theme") || "system";
  }
  function setThemeAttr(theme) {
    document.body.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);
    themeButtons.forEach((btn) => {
      const btnTheme = btn.getAttribute("data-theme");
      btn.classList.toggle("ring-2", btnTheme === theme);
      btn.classList.toggle("ring-offset-2", btnTheme === theme);
      btn.classList.toggle("ring-white", btnTheme === theme);
    });
  }

  themeButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
      const selectedTheme = btn.getAttribute("data-theme");
      setThemeAttr(selectedTheme);
    });
  });
  setThemeAttr(getSavedTheme());

  /* ==== LANGUAGES ==== */
  const languages = [
    { code: "es", name: "Spanish", flag: "/flags/es.svg" },
    { code: "en", name: "English", flag: "/flags/en.svg" },
  ];
  const langButtons = document.querySelectorAll("button[data-lang]");
  function getSavedLang() {
    return localStorage.getItem("lang") || "es";
  }
  function setLangAttr(lang) {
    localStorage.setItem("lang", lang);
    langButtons.forEach((btn) => {
      const btnLang = btn.getAttribute("data-lang");
      btn.classList.toggle("ring-2", btnLang === lang);
      btn.classList.toggle("ring-offset-2", btnLang === lang);
      btn.classList.toggle("ring-white", btnLang === lang);
    });
  }
  langButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
      const selectedLang = btn.getAttribute("data-lang");
      setLangAttr(selectedLang);
      
      const pathParts = window.location.pathname.split('/');
      if (languages.some(({ code }) => code === pathParts[1])) pathParts.splice(1, 1);
      const newPath = (selectedLang === 'es' ? '/' : `/${selectedLang}/`) + pathParts.slice(1).join('/');
      window.location.pathname = newPath.replace(/\/+$/, '');
    });
  });
  setLangAttr(getSavedLang());
</script>
